import bundleAsync, { cleanUnusedLockfiles } from './bundleAsync';

jest.setTimeout(1000 * 60 * 2);

// This integration test needs to validate if the packages are being bundled properly.
// To validate `bundle.js` from `<package>@<version`, we need to use the bundle size.
// It's an indicator of the bundled content, e.g. when it's 0 something is wrong

// Unfortunately, when a nested dependency is updated the bundled code changes in size.
// To prevent raising false alerts, we need to manage lockfiles for each tested `<package>@<version>`.
//   - Lockfiles are generated by Yarn and copied to `__snapshots__/lockfiles` by `bundleAsync` (after installing)
//   - When we have an existing lockfile, `bundleAsync` restores it just before installing
//   - `bundleAsync` keeps track of all used lockfiles, to auto-clean the repo when tests changes.
afterAll(() => cleanUnusedLockfiles());

describe('bundler', () => {
  it('creates bundle for a single platform', async () => {
    const bundle = await bundleAsync('firestorter@2.0.1', ['ios']);
    expect(bundle).toMatchSnapshot();
  });

  it('fails when no package name is specified', async () => {
    await expect(bundleAsync('', ['ios'])).rejects.toEqual(new Error(`Failed to parse request`));
  });

  it('externalizes dependencies that are marked as external', async () => {
    // `expo-google-app-auth` declares `expo-app-auth` as a direct dependency.
    // The `expo-app-auth` dependency should however still be externalized and
    // not linked into the bundle.
    const bundle = await bundleAsync('expo-google-app-auth@8.1.3');
    expect(bundle).toMatchSnapshot();
    expect(bundle.files.android['bundle.js'].externals).toEqual(
      expect.arrayContaining(['expo-app-auth'])
    );
  });

  it('resolves external source-code references', async () => {
    // `expo-linear-gradient` imports source-code from react-native-web directly.
    // e.g. "import normalizeColor from 'react-native-web/src/modules/normalizeColor';"
    // The bundler should install `react-native-web` and resolve the import correctly.
    // All regular `react-native-web` imports should be externalized.
    const bundle = await bundleAsync('expo-linear-gradient@8.2.1');
    expect(bundle).toMatchSnapshot();
  });

  it('resolves commonly missing peer-deps (prop-types)', async () => {
    // For example 'react-native-responsive-grid@0.32.4' has a dependency
    // on prop-types but no peerDep listed in package.json.
    const bundle = await bundleAsync('react-native-responsive-grid@0.32.4');
    expect(bundle).toMatchSnapshot();
    expect(bundle.files.android['bundle.js'].externals).not.toEqual(
      expect.arrayContaining(['prop-types'])
    );
  });

  it.skip('creates bundle for @react-navigation/native', async () => {
    const bundle = await bundleAsync('@react-navigation/native@5.7.3');
    expect(bundle).toMatchSnapshot();
    // @react-navigation/core should be included in the bundle and not an external
    expect(bundle.files.android['bundle.js'].externals).not.toEqual(
      expect.arrayContaining(['@react-navigation/core'])
    );
  });

  it('creates bundle for @react-navigation/stack', async () => {
    const bundle = await bundleAsync('@react-navigation/stack@5.9.0');
    expect(bundle).toMatchSnapshot();
    // @react-navigation/native should be included as an external
    expect(bundle.files.android['bundle.js'].externals).toEqual(
      expect.arrayContaining(['@react-navigation/native'])
    );
  });

  it('externalizes references to react-native-gesture-handler/DrawerLayout', async () => {
    const bundle = await bundleAsync('react-navigation@3.13.0', ['ios']);
    expect(bundle).toMatchSnapshot();
    // react-native-gesture-handler/DrawerLayout should be included as an external
    expect(bundle.files.ios['bundle.js'].externals).toEqual(
      expect.arrayContaining(['react-native-gesture-handler/DrawerLayout'])
    );
  });

  it('creates bundle for subpath', async () => {
    const bundle = await bundleAsync('react-native-gesture-handler/DrawerLayout@1.6.0');
    expect(bundle).toMatchSnapshot();
  });

  it('disallows bundling of core modules', async () => {
    await expect(bundleAsync('expo', ['ios'])).rejects.toEqual(
      new Error(`Bundling core module 'expo' is prohibited`)
    );
    await expect(bundleAsync('react-native', ['ios'])).rejects.toEqual(
      new Error(`Bundling core module 'react-native' is prohibited`)
    );
    await expect(bundleAsync('react-native-web', ['ios'])).rejects.toEqual(
      new Error(`Bundling core module 'react-native-web' is prohibited`)
    );
    await expect(bundleAsync('react-native-windows', ['ios'])).rejects.toEqual(
      new Error(`Bundling core module 'react-native-windows' is prohibited`)
    );
    await expect(
      bundleAsync('react-native/Libraries/Image/AssetRegistry', ['ios'])
    ).rejects.toEqual(
      new Error(`Bundling core module 'react-native/Libraries/Image/AssetRegistry' is prohibited`)
    );
  });

  it('creates bundle for subpath of core package', async () => {
    const bundle2 = await bundleAsync('react-native-web/src/modules/normalizeColor@0.14.4');
    expect(bundle2).toMatchSnapshot();
  });

  it('created bundle for react-native-gesture-handler', async () => {
    const bundle = await bundleAsync('react-native-gesture-handler@1.6.0');
    expect(bundle).toMatchSnapshot();
  });

  it('creates bundle for react-native-webview', async () => {
    const bundle = await bundleAsync('react-native-webview@10.9.1');
    expect(bundle).toMatchSnapshot();
    // react-native-webview contains a direct reference to
    // 'react-native/Libraries/BatchedBridge/BatchedBridge` and
    // should bundle correctly
  });

  it('creates bundle for react-native-screens/native-stack', async () => {
    const bundle = await bundleAsync('react-native-screens/native-stack@2.11.0');
    expect(bundle).toMatchSnapshot();
    // react-native-webview contains a direct reference to
    // 'react-native/Libraries/ReactNative/AppContainer` and
    // should bundle correctly
  });

  it('creates native bundles when web entry point is not found', async () => {
    const bundle = await bundleAsync('react-native-reanimated@2.0.0-alpha.6');
    // entry point cannot be found for the web platform for this package.
    // this should not cause the bundler to fail but continue with the native
    // platforms instead.
    expect(bundle.files['ios']['bundle.js'].size).toBeGreaterThanOrEqual(10000);
    expect(bundle.files['android']['bundle.js'].size).toBeGreaterThanOrEqual(10000);
    expect(bundle.files['web']['bundle.js'].size).toBe(0);
  });

  it('compiles reanimated2 worklets', async () => {
    const bundle = await bundleAsync('react-native-reanimated@2.0.0-rc.3', undefined, true);
    // verify that the number of expected worklet instances appear in the
    // generated bundle.
    expect(bundle.files['ios']['bundle.js'].code!.match(/worklet/g)!.length).toBe(150);
    expect(bundle.files['android']['bundle.js'].code!.match(/worklet/g)!.length).toBe(150);
  });

  it('compiles packages that use reanimated2', async () => {
    const bundle = await bundleAsync('moti@0.10.0', undefined, true);
    ['ios', 'android', 'web'].forEach((platform) => {
      expect(bundle.files[platform]['bundle.js'].code!.match(/worklet/g)!.length).toBe(11);
      expect(bundle.files[platform]['bundle.js'].size).toBeLessThanOrEqual(200000);
      expect(bundle.files[platform]['bundle.js'].externals).toEqual(
        expect.arrayContaining(['react-native-reanimated'])
      );
    });
  });

  it('filter aliased react-native dependencies', async () => {
    const bundle = await bundleAsync('@react-native-community/datetimepicker@3.0.3');
    expect(bundle).toMatchSnapshot();
    // datetimepicker contains a peer-dependency on `react-native-windows`
    // which causes the snack-sdk to try and bundle that dependency as it is not
    // listed as a preloaded module. 'react-native-windows' is considered a special
    // alias for 'react-native` and it therefore removed as a peer dependency
    expect(bundle.peerDependencies['react-native-windows']).toBeUndefined();
  });

  it(`filter internal react-native dependency TextInputState`, async () => {
    const bundle = await bundleAsync('@react-native-community/viewpager@4.2.0');
    // this version detects TextInputState as missing package on `react-native@^0.57.0`
    // validate that we can install and bundle it properly
    expect(bundle).toMatchSnapshot();
    expect(bundle.peerDependencies['TextInputState']).toBeUndefined();
  });

  it('externalizes package-externals of dependencies', async () => {
    const bundle = await bundleAsync('@draftbit/ui@40.34.4');
    // @drafbit/ui depends on @drafbit/core, which in turn depends
    // on `react-native-safe-area-context`. `react-native-safe-area-context` is
    // a package dependency which should be excluded from the bundle, even
    // if the import happens in a dependency of the requested package
    expect(bundle).toMatchSnapshot();
    ['ios', 'android', 'web'].forEach((platform) => {
      expect(bundle.files[platform]['bundle.js'].externals).toEqual(
        expect.arrayContaining(['react-native-safe-area-context'])
      );
    });
  });

  it('creates bundle for graphql@14.0.0', async () => {
    // This library was causing issues in aws-amplify because of mjs files.
    // It's imported by @aws-amplify/api -> @aws-amplify/api-graphql -> graphql,
    // because aws-amplify is HUGE, we are only testing `graphql@14.0.0` here.
    // see: https://github.com/graphql/graphql-js/issues/1272
    const bundle = await bundleAsync('graphql@14.0.0');
    expect(bundle).toMatchSnapshot();
    // Also validate that we don't have any relative extenals
    ['android', 'ios', 'web'].forEach((platform) => {
      expect(bundle.files[platform]['bundle.js'].externals).not.toEqual(
        expect.arrayContaining([expect.stringContaining('./')])
      );
    });
  });

  it('creates bundle for graphql@15.5.1', async () => {
    // This version of graphql contains a fix for the issue in graphql@14.
    // In this version, mjs files have the `.mjs` extension when imported.
    const bundle = await bundleAsync('graphql@15.5.1');
    expect(bundle).toMatchSnapshot();
    // Also validate that we don't have any relative externals
    ['android', 'ios', 'web'].forEach((platform) => {
      expect(bundle.files[platform]['bundle.js'].externals).not.toEqual(
        expect.arrayContaining([expect.stringContaining('./')])
      );
    });
  });

  it('bundles packages with json imports', async () => {
    const bundle = await bundleAsync('react-native-svg@12.1.1');
    expect(bundle).toMatchSnapshot();
  });
});
